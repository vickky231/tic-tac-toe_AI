import pandas as pd

data = {
    'user_id': [1, 1, 1, 2, 2, 2, 3, 3, 3],
    'movie_id': [101, 104, 103, 109, 102, 104, 101, 111, 105],
    'rating': [1,3, 1, 4, 5, 1, 2, 3, 5]
}

ratings_df = pd.DataFrame(data)

print(ratings_df)

user_item_matrix = ratings_df.pivot_table(index='user_id', columns='movie_id', values='rating')

print(user_item_matrix)

from sklearn.metrics.pairwise import cosine_similarity
import numpy as np

user_item_matrix_filled = user_item_matrix.fillna(0)

user_similarity = cosine_similarity(user_item_matrix_filled)
user_similarity_df = pd.DataFrame(user_similarity, index=user_item_matrix.index, columns=user_item_matrix.index)

print(user_similarity_df)

def recommend_movies(user_id, num_recommendations=3):
    similar_users = user_similarity_df[user_id].sort_values(ascending=False)
    
    user_ratings = user_item_matrix.loc[user_id]
    
    weighted_sum = np.zeros(user_item_matrix.shape[1])
    similarity_sum = np.zeros(user_item_matrix.shape[1])
    
    for similar_user_id, similarity_score in similar_users.items():
        if similar_user_id == user_id:
            continue
        
        similar_user_ratings = user_item_matrix.loc[similar_user_id]
        
        for movie_id in user_item_matrix.columns:
            if np.isnan(user_ratings[movie_id]):
                if not np.isnan(similar_user_ratings[movie_id]):
                    weighted_sum[movie_id] += similarity_score * similar_user_ratings[movie_id]
                    similarity_sum[movie_id] += similarity_score
    
    predicted_ratings = weighted_sum / similarity_sum
    
    predicted_ratings_df = pd.DataFrame(predicted_ratings, index=user_item_matrix.columns, columns=['predicted_rating'])
    
    already_rated = user_item_matrix.loc[user_id].dropna().index
    predicted_ratings_df = predicted_ratings_df.drop(already_rated)
    
    recommended_movies = predicted_ratings_df.sort_values(by='predicted_rating', ascending=False)
    
    return recommended_movies.head(num_recommendations)

recommended_movies = recommend_movies(1)
print(recommended_movies)





